#include <SDL.h>
#include "SDL_image.h"

SDL_Window* window;
SDL_Renderer* renderer;

SDL_Texture* twigman;
SDL_Texture* kalata;
SDL_Texture* schemm;
SDL_Texture* boger;
SDL_Texture* help;

void setupSDL()
  {
  if (SDL_Init(SDL_INIT_TIMER|SDL_INIT_AUDIO|SDL_INIT_VIDEO) != 0)
    {
    printf("SDL failed to init: %s\n", SDL_GetError());
    exit(1);
    }

  // Create window and renderer
	window = SDL_CreateWindow("The Great Adventure", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 
														600, 400, SDL_WINDOW_SHOWN);

	renderer = SDL_CreateRenderer(window, -1, 
										SDL_RENDERER_ACCELERATED|SDL_RENDERER_PRESENTVSYNC);
  //SDL_CreateWindowAndRenderer(600,400, SDL_WINDOW_SHOWN,&window, &renderer);

  if ((window == NULL) || (renderer == NULL))
    {
    printf("SDL_CreateWindowAndRenderer Error: %s\n", SDL_GetError() );
    exit(1);
    }

  }

SDL_Texture* loadImage(const char* filename)
  {
  SDL_Texture *texture;

  texture = IMG_LoadTexture(renderer, filename);
  if (texture == NULL)
    {
    printf("IMG_LoadTexture Error: %s\n", IMG_GetError() );
    exit(1);
    }
                                                             
                                                             
  return texture;                                            
  }                


SDL_Texture* loadKeyedImage(const char* filename)
	{
	SDL_Surface* surface;
	SDL_Texture* texture;

	surface = IMG_Load(filename);
	SDL_SetColorKey(surface, SDL_TRUE, 0xff00ff);
	texture = SDL_CreateTextureFromSurface(renderer, surface);
	return texture;
	}


void postSDLCleanup()                                        
    {                                                        
    SDL_DestroyRenderer(renderer);                           
    SDL_DestroyWindow(window);                               
    SDL_Quit();                                              
    }                                                        
                                                             
       





void finally()
	{
	int y[701] = {125, 124, 124, 123, 123, 122, 122, 121, 121, 120, 120, 119, 		119, 118, 118, 117, 117, 116, 116, 115, 115, 114, 114, 113, 113, 112, 112, 111, 110, 110, 109, 109, 108, 108, 107, 107, 106, 106, 105, 105, 104, 104, 103, 103, 102, 102, 101, 101, 100, 100, 100, 99, 99, 98, 98, 97, 97, 96, 96, 95, 95, 94, 94, 93, 93, 92, 92, 91, 91, 90, 90, 89, 89, 88, 87, 87, 86, 86, 85, 85, 84, 84, 83, 83, 82, 82, 81, 81, 80, 80, 79, 79, 78, 78, 77, 77, 76, 76, 75, 75, 74, 74, 73, 73, 72, 72, 71, 71, 70, 70, 69, 69, 68, 68, 67, 67, 66, 66, 65, 65, 64, 64, 63, 63, 62, 62, 61, 61, 60, 60, 59, 59, 58, 58, 57, 57, 56, 56, 56, 55, 55, 54, 54, 53, 53, 52, 52, 51, 51, 50, 50, 50, 49, 49, 48, 48, 47, 47, 46, 46, 46, 45, 45, 44, 44, 43, 43, 42, 42, 42, 41, 41, 40, 40, 40, 39, 39, 38, 38, 37, 37, 37, 36, 36, 35, 35, 35, 34, 34, 33, 33, 33, 32, 32, 32, 31, 31, 30, 30, 30, 29, 29, 29, 28, 28, 27, 27, 27, 26, 26, 26, 25, 25, 25, 24, 24, 24, 23, 23, 23, 22, 22, 22, 21, 21, 21, 20, 20, 20, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 16, 16, 16, 16, 15, 15, 15, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10, 10, 9, 9, 9, 9, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39, 39, 40, 40, 40, 41, 41, 42, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 56, 56, 57, 57, 58, 58, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63, 64, 64, 65, 65, 66, 66, 67, 67, 68, 68, 69, 69, 70, 70, 71, 71, 72, 72, 73, 73, 74, 74, 75, 75, 76, 76, 77, 77, 78, 78, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 85, 86, 86, 87, 87, 88, 89, 89, 90, 90, 91, 91, 92, 92, 93, 93, 94, 94, 95, 95, 96, 96, 97, 97, 98, 98, 99, 99, 100, 100, 100, 101, 101, 102, 102, 103, 103, 104, 104, 105, 105, 106, 106, 107, 107, 108, 108, 109, 109, 110, 110, 111, 112, 112, 113, 113, 114, 114, 115, 115, 116, 116, 117, 117, 118, 118, 119, 119, 120, 120, 121, 121, 122, 122, 123, 123, 124, 124, 125, };


	SDL_Rect ksrc;
	SDL_Rect kdest;
	SDL_Rect tsrc;
	SDL_Rect tdest;
	SDL_Rect bsrc;
	SDL_Rect bdest;
	SDL_Rect hsrc;
	SDL_Rect hdest;

	SDL_Event event;

	int kalata_x;
	int kalata_y;
	int kalata_pose;
	int hcount;

	int loop;

	kdest.x = 200; kdest.y  = 100;  kdest.w = 49; kdest.h = 49;
	ksrc.x = 0; ksrc.y = 0; ksrc.w = 49; ksrc.h = 49;
	kalata_x = 5; kalata_y = 0; kalata_pose = 0;
	
	bdest.x = -50; bdest.y = 475; bdest.w = 49; bdest.h = 49;
	bsrc.x = 0; bsrc.y = 0; bsrc.w = 49; bsrc.h = 49;

	tdest.x = 275; tdest.y = 175; tdest.w = 49; tdest.h = 49;
	tsrc.x = 0; tsrc.y = 49; tsrc.w = 49; tsrc.h = 49;
	
	hdest.x = 325; hdest.y = 210; hdest.w = 38; hdest.h = 20;
	hsrc.x = 0; hsrc.y = 0; hsrc.w = 38; hsrc.h = 20;

	hcount = 0;
	

	for (loop = -50; loop < 600; loop++)
		{
		SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
		SDL_RenderClear(renderer);

		bdest.x = loop; bdest.y = y[(loop)+50];

		kdest.x = kdest.x + kalata_x;
		kdest.y = kdest.y + kalata_y;

		hcount++;
		kalata_pose++;	
		if (kalata_pose == 6) kalata_pose = 0;
		ksrc.x = kalata_pose * 49;
		tsrc.x = kalata_pose * 49;
		bsrc.x = kalata_pose * 49;

		SDL_RenderCopy(renderer, kalata, &ksrc, &kdest);
		SDL_RenderCopy(renderer, twigman, &tsrc, &tdest);
		SDL_RenderCopy(renderer, boger, &bsrc, &bdest);
		if (hcount < 15)	SDL_RenderCopy(renderer, help, &hsrc, &hdest);
		
		SDL_RenderPresent(renderer);

	
		
		if ((kdest.x == 350) && (kdest.y == 100))
			{
			kalata_x  = 0; kalata_y = 5;
			hdest.x = 237; hdest.y = 210; hcount = 0;
			}
		
		if ((kdest.x == 350) && (kdest.y == 250))
			{
			kalata_x  = -5; kalata_y = 0;
			hdest.x = 237; hdest.y = 170; hcount = 0;
			}
		if ((kdest.x == 200) && (kdest.y == 250))
			{
			kalata_x  = 0; kalata_y = -5;
			hdest.x = 325; hdest.y = 170; hcount = 0;
			}
		if ((kdest.x == 200) && (kdest.y == 100))
			{
			kalata_x  = 5; kalata_y = 0;
			hdest.x = 325; hdest.y = 210; hcount = 0;
			}


        if (SDL_PollEvent(&event) > 0)
                       {
                       switch(event.type)
                         {
						case SDL_KEYDOWN:
         					 if (event.key.keysym.scancode ==
									 SDL_SCANCODE_ESCAPE)
              				exit(0);
                         case SDL_QUIT: 
                           exit(0);
                         }
                       }

		SDL_Delay(50);
		}

	}



void confront()
	{
	int loop;

	SDL_Rect tsrc;
	SDL_Rect tdest;
	SDL_Rect bsrc;
	SDL_Rect bdest;
	SDL_Rect bsrc;
	SDL_Rect bdest;
	SDL_Rect hsrc;
	SDL_Rect hdest;

	tdest.x = 275; tdest.y = 175; tdest.w = 49; tdest.h = 49;
	tsrc.x = 0; tsrc.y = 0; tsrc.w = 49; tsrc.h = 49;
	

	for (loop = 0; loop < 1000; loop++)
		{


		if (SDL_PollEvent(&event) > 0)
              {
                       switch(event.type)
                         {
						case SDL_KEYDOWN:
         					 if (event.key.keysym.scancode ==
									 SDL_SCANCODE_ESCAPE)
              				exit(0);
                         case SDL_QUIT: 
                           exit(0);
                         }
                       }

		SDL_Delay(50);
		}
	

	}




int main(int argc, char* argv[])
	{
	
	SDL_Rect ksrc;
	SDL_Rect kdest;
	SDL_Rect tsrc;
	SDL_Rect tdest;
	
SDL_Event event;

	int kalata_x;
	int kalata_y;
	int kalata_pose;
	
	int posetime;
 	setupSDL();

	twigman = loadImage("TwigManClear.png");
	kalata = loadImage("kalata2.png");
	boger = loadImage("Boger49.png");
	help = loadImage("help.png");
	schemm = loadImage("schemm.png");
	eraser = loadImage("eraser.png");

	finally();

	}
